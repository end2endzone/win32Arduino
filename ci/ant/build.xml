<?xml version="1.0" encoding="iso-8859-1"?>
<project name="win32Arduino" default="" basedir=".">

  <!-- Default property values -->
  <property name="home.dir" location="${basedir}/../.." />
  <property name="src.dir" location="${home.dir}/src" />
  <property name="deploy.dir" location="${home.dir}/deploy" />
  <property name="publish.dir" location="${home.dir}/publish" />
  <property name="build.dir" location="${home.dir}/build" />
  <property name="thirdparty.dir" location="${home.dir}/third_party" />
  <property name="demo.dir" location="${home.dir}/src/demos" />

  <include file="macros.xml"/>

  <target name="debug" depends="-init, -findConfiguration" />

  <target name="-init" depends="" description="">

    <!--Define current time for logs-->
    <tstamp>
      <format property="build.time" pattern="yyyy-MM-dd HH:mm:ss"/>
    </tstamp>

    <!--for ComSpec-->
    <property environment="env"/>

    <echo>  Java Home :       ${java.home}</echo>
    <echo>  Build File :      ${ant.file}</echo>
    <echo>  Run Date :        ${build.time}</echo>
    <echo>  Run by :          ${user.name}</echo>
    <echo>  Base Dir :        ${basedir}</echo>
    <echo>  Deploy Dir :      ${deploy.dir}</echo>
    <echo>  Build Dir :       ${build.dir}</echo>
    <echo>  Publish Dir :     ${publish.dir}</echo>
    <echo>  Third Party Dir : ${thirdparty.dir}</echo>

    <mkdir dir="${deploy.dir}" />
    <mkdir dir="${build.dir}" />
    <mkdir dir="${publish.dir}" />
    <mkdir dir="${thirdparty.dir}" />
  </target>

  <target name="-findConfiguration" depends="-init" description="Defines variable 'build.configuration' based on the current system">
    <find-build-config property="build.configuration" default="Release" />
    <required-property name="build.configuration" />
    
    <echo>Found build configuration: ${build.configuration}</echo>
  </target>

  <target name="disable_unittest" description="Disable the compilation of project `win32Arduino_unittest`." depends="-init" >
    <local name="targetfile" />
    <property name="targetfile" value="${home.dir}\CMakeLists.txt" />
    <echo>Disabling unit tests from ${targetfile}...</echo>

    <echo file="${targetfile}" append="true">set_target_properties(win32Arduino_unittest PROPERTIES EXCLUDE_FROM_ALL 1 EXCLUDE_FROM_DEFAULT_BUILD 1)${line.separator}</echo>

    <echo>Writing file ${targetfile} completed.</echo>
  </target>

  <target name="reset" description="Delete all build artifacts and third_parties." depends="-init, clean" >
    <delete dir="${thirdparty.dir}" />
  </target>

  <target name="clean" description="Delete build, deploy and publish directories." depends="-init" >
    <delete dir="${build.dir}" />
    <delete dir="${deploy.dir}" />
    <delete dir="${publish.dir}" />
  </target>

  <target name="-cmake.generate" description="Generate build file from sources" depends="-init, -findConfiguration" >
    <cmake name="win32Arduino" build="${build.dir}" source="${home.dir}" config="${build.configuration}" />
  </target>

  <target name="compile" description="Build all source files." depends="-init, -findConfiguration, -cmake.generate" >
    <cmake-build name="win32Arduino" build="${build.dir}" source="${home.dir}" config="${build.configuration}" />
  </target>

  <macrodef name="build-demo" description="Builds a demo project in /src/demos.">
    <attribute name="name"/>
    <sequential>
      <echo>============================================================================================================</echo>
      <mkdir dir="${demo.dir}/@{name}/build" />
      <cmake       name="@{name}" build="${demo.dir}/@{name}/build" source="${demo.dir}/@{name}" config="${build.configuration}" />
      <cmake-build name="@{name}" build="${demo.dir}/@{name}/build" source="${demo.dir}/@{name}" config="${build.configuration}" />
    </sequential>
  </macrodef>

  <target name="demos" description="Build all arduino demo files using win32Arduino." depends="-init, compile, -findConfiguration" >
    <build-demo name="Constants" />
    <build-demo name="Interrupts" />
    <build-demo name="MicrosOverflow" />
    <build-demo name="Progmem1" />
    <build-demo name="Progmem2" />
    <build-demo name="Progmem3" />
  </target>

  <target name="-test.unit.find" description="Finds the unit test executable">
    <findfile property="test.unit.exec" dir="${build.dir}/bin" name="**/win32Arduino_unittest*" />
    <required-property name="test.unit.exec" />
    <echo>Found unit test exec: ${test.unit.exec}</echo>
  </target>

  <target name="test" description="Executes unit tests." depends="-init, -findConfiguration, -test.unit.find">
    <echo>Unit Tests - START</echo>

    <!--Find unit test directory-->
    <dirname file="${test.unit.exec}" property="test.unit.dir" />
    
    <echo>Deleting previous test results</echo>
    <property name="test.unit.results.pattern" value="**/win32Arduino_unittest.*.xml" />
    <delete>
      <fileset dir="${test.unit.dir}">
        <include name="${test.unit.results.pattern}"/>
        <include name="**/*.log"/>
      </fileset>
    </delete>
    <echo />

    <!--Run unit tests-->
    <exec executable="${test.unit.exec}"
          dir="${test.unit.dir}"
          failonerror="false" />
    <echo />

    <!--Find test result file-->
    <local name="test.unit.resultsfile" />
    <findfile property="test.unit.resultsfile" dir="${test.unit.dir}" name="${test.unit.results.pattern}" />
    <required-property name="test.unit.resultsfile" />
    <echo>Found unit test results: ${test.unit.resultsfile}</echo>

    <!--Copy to publish folder-->
    <copy file="${test.unit.resultsfile}" todir="${publish.dir}" />

    <echo>Unit Tests - END</echo>
  </target>

  <target name="-googletest.install" depends="-init, -findConfiguration">
    <install-third-party name="googletest" dir="${thirdparty.dir}" url="https://codeload.github.com/google/googletest/zip/release-1.6.0" />

    <!--Define cmake flags based on OS-->
    <condition property="googletest.cmake.args" value="-Dgtest_force_shared_crt=ON -DCMAKE_CXX_FLAGS_DEBUG=/MDd -DCMAKE_CXX_FLAGS_RELEASE=/MD">
      <os family="windows" />
    </condition>
    <condition property="googletest.cmake.args" value="-DBUILD_SHARED_LIBS=ON">
      <os family="unix" />
    </condition>

    <cmake       name="googletest" build="${googletest.dir}/build" source="${googletest.dir}" config="${build.configuration}" args="${googletest.cmake.args}" />
    <cmake-build name="googletest" build="${googletest.dir}/build" source="${googletest.dir}" config="${build.configuration}" />
  </target>

  <target name="install" depends="-init, -googletest.install" description="Installs required software dependencies in third_party directory.">
  </target>

</project>
