cmake_minimum_required(VERSION 3.4.3)
project(win32Arduino)

# Set the output folder where your program will be created
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin)
set(   LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin)

MESSAGE( STATUS "CMAKE_BINARY_DIR:         " ${CMAKE_BINARY_DIR} )
MESSAGE( STATUS "CMAKE_CURRENT_BINARY_DIR: " ${CMAKE_CURRENT_BINARY_DIR} )
MESSAGE( STATUS "CMAKE_SOURCE_DIR:         " ${CMAKE_SOURCE_DIR} )
MESSAGE( STATUS "CMAKE_CURRENT_SOURCE_DIR: " ${CMAKE_CURRENT_SOURCE_DIR} )
MESSAGE( STATUS "PROJECT_BINARY_DIR:       " ${PROJECT_BINARY_DIR} )
MESSAGE( STATUS "PROJECT_SOURCE_DIR:       " ${PROJECT_SOURCE_DIR} )
MESSAGE( STATUS "EXECUTABLE_OUTPUT_PATH:   " ${EXECUTABLE_OUTPUT_PATH} )
MESSAGE( STATUS "LIBRARY_OUTPUT_PATH:      " ${LIBRARY_OUTPUT_PATH} )
MESSAGE( STATUS "CMAKE_MODULE_PATH:        " ${CMAKE_MODULE_PATH} )
MESSAGE( STATUS "CMAKE_COMMAND:            " ${CMAKE_COMMAND} )
MESSAGE( STATUS "CMAKE_ROOT:               " ${CMAKE_ROOT} )
MESSAGE( STATUS "CMAKE_CURRENT_LIST_FILE:  " ${CMAKE_CURRENT_LIST_FILE} )
MESSAGE( STATUS "CMAKE_CURRENT_LIST_LINE:  " ${CMAKE_CURRENT_LIST_LINE} )
MESSAGE( STATUS "CMAKE_INCLUDE_PATH:       " ${CMAKE_INCLUDE_PATH} )
MESSAGE( STATUS "CMAKE_LIBRARY_PATH:       " ${CMAKE_LIBRARY_PATH} )
MESSAGE( STATUS "CMAKE_SYSTEM:             " ${CMAKE_SYSTEM} )
MESSAGE( STATUS "CMAKE_SYSTEM_NAME:        " ${CMAKE_SYSTEM_NAME} )
MESSAGE( STATUS "CMAKE_SYSTEM_VERSION:     " ${CMAKE_SYSTEM_VERSION} )
MESSAGE( STATUS "CMAKE_SYSTEM_PROCESSOR:   " ${CMAKE_SYSTEM_PROCESSOR} )

# Define product version according to Semantic Versioning v2.0.0 https://semver.org/
MESSAGE("")
SET(WIN32ARDUINO_MAJOR_VERSION 2)
SET(WIN32ARDUINO_MINOR_VERSION 2)
SET(WIN32ARDUINO_PATCH_VERSION 0)
SET(WIN32ARDUINO_PRERELEASE_VERSION "") #i.e: rc1
SET(WIN32ARDUINO_METADATA_VERSION "")   #i.e: build.45
SET(WIN32ARDUINO_VERSION_STRING ${WIN32ARDUINO_MAJOR_VERSION}.${WIN32ARDUINO_MINOR_VERSION}.${WIN32ARDUINO_PATCH_VERSION})
IF(NOT ${WIN32ARDUINO_PRERELEASE_VERSION} STREQUAL "")
  SET(WIN32ARDUINO_VERSION_STRING ${WIN32ARDUINO_VERSION_STRING}-${WIN32ARDUINO_PRERELEASE_VERSION})
ENDIF()
IF(NOT ${WIN32ARDUINO_METADATA_VERSION} STREQUAL "")
  SET(WIN32ARDUINO_VERSION_STRING ${WIN32ARDUINO_VERSION_STRING}+${WIN32ARDUINO_METADATA_VERSION})
ENDIF()
MESSAGE("WIN32ARDUINO_VERSION_STRING: ${WIN32ARDUINO_VERSION_STRING}")
MESSAGE("")

# Generate version files for different systems
CONFIGURE_FILE("${CMAKE_CURRENT_SOURCE_DIR}/src/win32Arduino/version.h.in"        "${PROJECT_BINARY_DIR}/src/win32Arduino/version.h")
CONFIGURE_FILE("${CMAKE_CURRENT_SOURCE_DIR}/version_info.bat.in"                  "${CMAKE_CURRENT_SOURCE_DIR}/version_info.bat")
CONFIGURE_FILE("${CMAKE_CURRENT_SOURCE_DIR}/version_info.sh.in"                   "${CMAKE_CURRENT_SOURCE_DIR}/version_info.sh")
CONFIGURE_FILE("${CMAKE_CURRENT_SOURCE_DIR}/ci/ant/version_info.properties.in"    "${CMAKE_CURRENT_SOURCE_DIR}/ci/ant/version_info.properties")

# Add source directories
add_subdirectory(src/win32Arduino)
add_subdirectory(src/win32Arduino_unittest)

# Define project dependencies
add_dependencies(win32Arduino_unittest win32Arduino)

# Add googletest to project
if (WIN32)
  # https://stackoverflow.com/a/12546288
  # Force building googletest in `Multi-threaded Debug DLL (/MDd)` and `Multi-threaded DLL (/MD)`
  set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
endif()
add_subdirectory($ENV{GOOGLETEST_HOME})
set_target_properties(gtest_main PROPERTIES EXCLUDE_FROM_ALL 1 EXCLUDE_FROM_DEFAULT_BUILD 1)
